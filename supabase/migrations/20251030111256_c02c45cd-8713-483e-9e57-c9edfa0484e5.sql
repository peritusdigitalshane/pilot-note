-- Pack 21: Microservices Architecture (10 detailed prompts)
INSERT INTO prompt_pack_items (pack_id, title, prompt_text, order_index)
SELECT id, 'Microservices Decomposition Strategy', 'Design a strategy to decompose a monolithic application into microservices. Apply domain-driven design principles to identify bounded contexts, define service boundaries, and establish ownership. Analyse data dependencies, transaction boundaries, and communication patterns. Address the strangler fig pattern for gradual migration, anti-corruption layers, and service discovery. Provide migration roadmap, risk assessment, and rollback strategies using modern microservices architectural patterns and Australian software engineering standards.', 0 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'API Gateway Implementation', 'Implement an API Gateway using Kong, Amazon API Gateway, or similar solutions. Include request routing, protocol translation, authentication/authorisation, rate limiting, request/response transformation, and API versioning. Design circuit breaker patterns, timeout configurations, and retry policies. Address logging, monitoring, analytics, and developer portal. Provide security policies, caching strategies, and multi-region deployment using API management best practises and Australian digital service standards.', 1 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Service Mesh Architecture', 'Design a service mesh using Istio, Linkerd, or Consul Connect. Include service-to-service authentication (mTLS), traffic management, load balancing, circuit breaking, and observability. Implement canary deployments, blue-green deployments, and traffic splitting. Address distributed tracing, service-level metrics, and policy enforcement. Provide sidecar proxy configuration, control plane management, and troubleshooting guides using cloud-native architectural patterns and Australian infrastructure standards.', 2 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Event-Driven Microservices', 'Build event-driven microservices using Apache Kafka, RabbitMQ, or AWS EventBridge. Include event sourcing patterns, CQRS implementation, saga orchestration for distributed transactions, and event schema evolution. Design event-driven workflows, asynchronous communication patterns, and eventual consistency handling. Address event replay, dead letter queues, and idempotency. Provide event catalog, message contracts, and versioning strategies using reactive architecture patterns and Australian system design principles.', 3 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Microservices Data Management', 'Design data management strategy for microservices following database-per-service pattern. Address data consistency across services, distributed transactions, saga patterns, and eventual consistency. Implement CQRS for read/write separation, event sourcing for audit trails, and data synchronisation. Handle data duplication, referential integrity, and reporting across services. Provide data migration strategies and backup/recovery procedures using polyglot persistence approaches and Australian data governance frameworks.', 4 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Microservices Observability', 'Implement comprehensive observability for microservices. Include distributed tracing using Jaeger or Zipkin, centralised logging with ELK stack, metrics collection with Prometheus, and visualisation with Grafana. Design correlation IDs, service maps, dependency graphs, and SLA monitoring. Address log aggregation across services, trace sampling strategies, and alerting rules. Provide observability best practises, incident response procedures, and performance analysis using site reliability engineering principles and Australian operational standards.', 5 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Microservices Security Architecture', 'Design security architecture for microservices. Include service-to-service authentication using OAuth 2.0 and JWT tokens, mTLS for encrypted communication, API gateway security, and secrets management. Implement rate limiting, DDoS protection, input validation, and security scanning. Address zero trust networking, service mesh security policies, and compliance requirements. Provide threat modelling, security testing strategies, and incident response plans using secure by design principles and Australian cybersecurity frameworks.', 6 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Container Orchestration with Kubernetes', 'Implement container orchestration using Kubernetes for microservices. Include deployment strategies, service discovery, load balancing, auto-scaling (HPA, VPA), and rolling updates. Design pod configuration, resource limits, health checks, and persistent storage. Address namespace organisation, network policies, ingress controllers, and service mesh integration. Provide helm charts, CI/CD pipeline integration, and disaster recovery procedures using cloud-native deployment patterns and Australian infrastructure best practises.', 7 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Microservices Testing Strategy', 'Develop a comprehensive testing strategy for microservices. Include contract testing using Pact, integration testing, end-to-end testing, chaos engineering, and performance testing. Implement consumer-driven contracts, service virtualisation, and test data management. Address testing in isolation, testing service interactions, and production testing strategies. Provide test automation framework, testing pyramid guidance, and quality metrics using modern testing methodologies and Australian software quality standards.', 8 FROM prompt_packs WHERE name = 'Microservices Architecture'
UNION ALL
SELECT id, 'Microservices Deployment Pipeline', 'Design CI/CD pipeline for microservices deployment. Include automated testing, containerisation, image scanning, deployment to Kubernetes, and progressive delivery. Implement blue-green deployments, canary releases, feature flags, and automated rollbacks. Address environment management, configuration management, secrets injection, and deployment monitoring. Provide pipeline as code, approval workflows, and compliance checks using DevOps best practises and Australian continuous delivery standards.', 9 FROM prompt_packs WHERE name = 'Microservices Architecture';

-- Pack 22: User Interface Design (10 detailed prompts)
INSERT INTO prompt_pack_items (pack_id, title, prompt_text, order_index)
SELECT id, 'Design System Creation', 'Create a comprehensive design system for consistent UI across products. Include colour palette with accessibility considerations, typography scale, spacing system, component library, iconography, and interaction patterns. Design tokens for cross-platform consistency, documentation site, and usage guidelines. Address light/dark mode support, responsive breakpoints, and animation principles. Provide Figma/Sketch files, component code library, and governance model using atomic design methodology and Australian digital design standards.', 0 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Responsive Web Design', 'Design responsive web interfaces that work across all devices and screen sizes. Include mobile-first approach, flexible grid systems, fluid typography, responsive images, and touch-friendly interactions. Implement breakpoint strategy, progressive enhancement, and graceful degradation. Address performance on mobile networks, cross-browser compatibility, and accessibility. Provide responsive design patterns, testing procedures, and maintenance guidelines using modern CSS techniques and Australian web standards.', 1 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'User Experience Research', 'Conduct user experience research to inform design decisions. Include user interviews, usability testing, surveys, analytics analysis, and competitive research. Design research protocols, recruitment strategies, and analysis frameworks. Implement personas, journey maps, empathy maps, and opportunity identification. Address ethical research practises, participant privacy, and inclusive research. Provide research synthesis, actionable insights, and design recommendations using UX research methodologies and Australian human-centred design principles.', 2 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Accessibility-First Design', 'Design interfaces with accessibility as a primary consideration. Include WCAG 2.1 Level AA compliance, screen reader optimisation, keyboard navigation, colour contrast requirements, and focus indicators. Implement ARIA labels, semantic HTML, captions for media, and alternative text. Address cognitive accessibility, motion preferences, and text resizing. Provide accessibility testing checklists, assistive technology testing, and inclusive design guidelines using Australian accessibility standards and WCAG principles.', 3 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Information Architecture', 'Design information architecture for complex digital products. Include content inventory, card sorting, tree testing, and sitemap creation. Design navigation systems, labelling conventions, search functionality, and filtering mechanisms. Address findability, scannability, and mental models. Implement taxonomy and metadata strategies. Provide IA documentation, user flow diagrams, and content organisation principles using information architecture best practises and Australian content strategy frameworks.', 4 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Interactive Prototype Design', 'Create interactive prototypes for user testing and stakeholder validation. Include low-fidelity wireframes, high-fidelity mockups, and clickable prototypes. Design user flows, micro-interactions, transitions, and animations. Implement prototype testing sessions, feedback collection, and iteration cycles. Address prototype fidelity decisions, tool selection (Figma, Adobe XD, Framer), and handoff to development. Provide prototyping best practises and collaboration workflows using rapid prototyping methodologies and Australian design validation approaches.', 5 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Dashboard UI Design', 'Design data-rich dashboard interfaces for complex information display. Include data visualisation selection (charts, graphs, tables), KPI display, filtering and drill-down capabilities, and real-time updates. Implement progressive disclosure, dashboard customisation, and export functionality. Address information hierarchy, cognitive load management, and glanceable metrics. Provide dashboard design patterns, data density strategies, and user personalisation using data visualisation principles and Australian business intelligence design standards.', 6 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Form Design Optimisation', 'Optimise form design for completion and user satisfaction. Include field organisation, input validation, error messaging, progress indicators, and conditional logic. Design autofill support, input masking, accessible form controls, and clear labelling. Address multi-step forms, save and resume functionality, and mobile considerations. Provide form design patterns, validation strategies, and conversion optimisation techniques using form usability best practises and Australian digital service standards.', 7 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Design Handoff Process', 'Establish design-to-development handoff process for accurate implementation. Include design specifications, component documentation, asset export, and annotation. Implement design tokens, style guides, interaction specifications, and responsive behaviours. Address developer collaboration, design QA process, and feedback loops. Provide handoff checklists, tooling recommendations (Zeplin, Figma Inspect), and communication protocols using efficient design-development collaboration practises and Australian agile methodologies.', 8 FROM prompt_packs WHERE name = 'User Interface Design'
UNION ALL
SELECT id, 'Micro-interaction Design', 'Design micro-interactions to enhance user experience and provide feedback. Include button states, loading indicators, success/error messages, hover effects, and transition animations. Design pull-to-refresh, swipe gestures, drag-and-drop feedback, and skeleton screens. Address animation timing, easing functions, and performance considerations. Provide animation libraries, implementation guidelines, and accessibility considerations using motion design principles and Australian digital interaction standards.', 9 FROM prompt_packs WHERE name = 'User Interface Design';